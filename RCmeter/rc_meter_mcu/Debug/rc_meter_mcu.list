
rc_meter_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005220  08005220  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005220  08005220  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005220  08005220  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005220  08005220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005228  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000000c  08005234  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005234  000073c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000decf  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e3  00000000  00000000  00014f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000171e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  00017f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c4f  00000000  00000000  0001899d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3ec  00000000  00000000  000305ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c75e  00000000  00000000  0003f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  000cc17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cf928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080051dc 	.word	0x080051dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080051dc 	.word	0x080051dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb0c 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80a 	bl	800016c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f906 	bl	8000368 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f866 	bl	800022c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000160:	f000 f8a2 	bl	80002a8 <MX_ADC2_Init>
  MX_USB_PCD_Init();
 8000164:	f000 f8de 	bl	8000324 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	bf00      	nop
 800016a:	e7fd      	b.n	8000168 <main+0x1c>

0800016c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b094      	sub	sp, #80	@ 0x50
 8000170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000176:	2228      	movs	r2, #40	@ 0x28
 8000178:	2100      	movs	r1, #0
 800017a:	4618      	mov	r0, r3
 800017c:	f005 f801 	bl	8005182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000180:	f107 0314 	add.w	r3, r7, #20
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019c:	2301      	movs	r3, #1
 800019e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a6:	2300      	movs	r3, #0
 80001a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ae:	2302      	movs	r3, #2
 80001b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fbc4 	bl	8002950 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ce:	f000 f90b 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fe30 	bl	8002e54 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001fa:	f000 f8f5 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80001fe:	2312      	movs	r3, #18
 8000200:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000206:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fff0 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800021a:	f000 f8e5 	bl	80003e8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800021e:	f002 ff03 	bl	8003028 <HAL_RCC_EnableCSS>
}
 8000222:	bf00      	nop
 8000224:	3750      	adds	r7, #80	@ 0x50
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800023e:	4a19      	ldr	r2, [pc, #100]	@ (80002a4 <MX_ADC1_Init+0x78>)
 8000240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000242:	4b17      	ldr	r3, [pc, #92]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000248:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800024a:	2200      	movs	r2, #0
 800024c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024e:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000256:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000264:	2201      	movs	r2, #1
 8000266:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000268:	480d      	ldr	r0, [pc, #52]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800026a:	f000 fab1 	bl	80007d0 <HAL_ADC_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000274:	f000 f8b8 	bl	80003e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000278:	2300      	movs	r3, #0
 800027a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2301      	movs	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4619      	mov	r1, r3
 8000288:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800028a:	f000 fc4b 	bl	8000b24 <HAL_ADC_ConfigChannel>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000294:	f000 f8a8 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000028 	.word	0x20000028
 80002a4:	40012400 	.word	0x40012400

080002a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002b8:	4b18      	ldr	r3, [pc, #96]	@ (800031c <MX_ADC2_Init+0x74>)
 80002ba:	4a19      	ldr	r2, [pc, #100]	@ (8000320 <MX_ADC2_Init+0x78>)
 80002bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002be:	4b17      	ldr	r3, [pc, #92]	@ (800031c <MX_ADC2_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <MX_ADC2_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002ca:	4b14      	ldr	r3, [pc, #80]	@ (800031c <MX_ADC2_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_ADC2_Init+0x74>)
 80002d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_ADC2_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_ADC2_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80002e4:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_ADC2_Init+0x74>)
 80002e6:	f000 fa73 	bl	80007d0 <HAL_ADC_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80002f0:	f000 f87a 	bl	80003e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4619      	mov	r1, r3
 8000304:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_ADC2_Init+0x74>)
 8000306:	f000 fc0d 	bl	8000b24 <HAL_ADC_ConfigChannel>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000310:	f000 f86a 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000058 	.word	0x20000058
 8000320:	40012800 	.word	0x40012800

08000324 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <MX_USB_PCD_Init+0x40>)
 800032c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 8000330:	2208      	movs	r2, #8
 8000332:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 8000336:	2202      	movs	r2, #2
 8000338:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800033a:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000346:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800034c:	4804      	ldr	r0, [pc, #16]	@ (8000360 <MX_USB_PCD_Init+0x3c>)
 800034e:	f000 ff8f 	bl	8001270 <HAL_PCD_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000358:	f000 f846 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000088 	.word	0x20000088
 8000364:	40005c00 	.word	0x40005c00

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <MX_GPIO_Init+0x58>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <MX_GPIO_Init+0x58>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0310 	and.w	r3, r3, #16
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <MX_GPIO_Init+0x58>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <MX_GPIO_Init+0x58>)
 800038c:	f043 0320 	orr.w	r3, r3, #32
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <MX_GPIO_Init+0x58>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0320 	and.w	r3, r3, #32
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <MX_GPIO_Init+0x58>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <MX_GPIO_Init+0x58>)
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <MX_GPIO_Init+0x58>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0304 	and.w	r3, r3, #4
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d101      	bne.n	80003da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003d6:	f000 f9df 	bl	8000798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40012c00 	.word	0x40012c00

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	@ (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	@ 0x28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a30      	ldr	r2, [pc, #192]	@ (8000534 <HAL_ADC_MspInit+0xdc>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d12a      	bne.n	80004ce <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000478:	4b2f      	ldr	r3, [pc, #188]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2e      	ldr	r2, [pc, #184]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b2c      	ldr	r3, [pc, #176]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a28      	ldr	r2, [pc, #160]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80004a8:	2305      	movs	r3, #5
 80004aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	4619      	mov	r1, r3
 80004b6:	4821      	ldr	r0, [pc, #132]	@ (800053c <HAL_ADC_MspInit+0xe4>)
 80004b8:	f000 fd56 	bl	8000f68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2012      	movs	r0, #18
 80004c2:	f000 fd26 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004c6:	2012      	movs	r0, #18
 80004c8:	f000 fd3f 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80004cc:	e02e      	b.n	800052c <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000540 <HAL_ADC_MspInit+0xe8>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d129      	bne.n	800052c <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80004d8:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <HAL_ADC_MspInit+0xe0>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000508:	2305      	movs	r3, #5
 800050a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050c:	2303      	movs	r3, #3
 800050e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	4619      	mov	r1, r3
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <HAL_ADC_MspInit+0xe4>)
 8000518:	f000 fd26 	bl	8000f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	2012      	movs	r0, #18
 8000522:	f000 fcf6 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000526:	2012      	movs	r0, #18
 8000528:	f000 fd0f 	bl	8000f4a <HAL_NVIC_EnableIRQ>
}
 800052c:	bf00      	nop
 800052e:	3728      	adds	r7, #40	@ 0x28
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40012400 	.word	0x40012400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	40012800 	.word	0x40012800

08000544 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <HAL_PCD_MspInit+0x44>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d113      	bne.n	800057e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <HAL_PCD_MspInit+0x48>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <HAL_PCD_MspInit+0x48>)
 800055c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <HAL_PCD_MspInit+0x48>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2014      	movs	r0, #20
 8000574:	f000 fccd 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000578:	2014      	movs	r0, #20
 800057a:	f000 fce6 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40005c00 	.word	0x40005c00
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	@ 0x30
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000598:	2300      	movs	r3, #0
 800059a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <HAL_InitTick+0xd0>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000660 <HAL_InitTick+0xd0>)
 80005ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <HAL_InitTick+0xd0>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fdab 	bl	8003124 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005ce:	f002 fd95 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80005d2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d6:	4a23      	ldr	r2, [pc, #140]	@ (8000664 <HAL_InitTick+0xd4>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	0c9b      	lsrs	r3, r3, #18
 80005de:	3b01      	subs	r3, #1
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <HAL_InitTick+0xd8>)
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <HAL_InitTick+0xdc>)
 80005e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <HAL_InitTick+0xd8>)
 80005ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <HAL_InitTick+0xd8>)
 80005f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <HAL_InitTick+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <HAL_InitTick+0xd8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <HAL_InitTick+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000608:	4817      	ldr	r0, [pc, #92]	@ (8000668 <HAL_InitTick+0xd8>)
 800060a:	f002 fea9 	bl	8003360 <HAL_TIM_Base_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000614:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11b      	bne.n	8000654 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800061c:	4812      	ldr	r0, [pc, #72]	@ (8000668 <HAL_InitTick+0xd8>)
 800061e:	f002 fef7 	bl	8003410 <HAL_TIM_Base_Start_IT>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000628:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800062c:	2b00      	cmp	r3, #0
 800062e:	d111      	bne.n	8000654 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000630:	2019      	movs	r0, #25
 8000632:	f000 fc8a 	bl	8000f4a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	d808      	bhi.n	800064e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	2019      	movs	r0, #25
 8000642:	f000 fc66 	bl	8000f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <HAL_InitTick+0xe0>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	e002      	b.n	8000654 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000654:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000658:	4618      	mov	r0, r3
 800065a:	3730      	adds	r7, #48	@ 0x30
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	431bde83 	.word	0x431bde83
 8000668:	20000378 	.word	0x20000378
 800066c:	40012c00 	.word	0x40012c00
 8000670:	20000004 	.word	0x20000004

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000678:	f002 fd84 	bl	8003184 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <NMI_Handler+0x8>

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <ADC1_2_IRQHandler+0x14>)
 80006d6:	f000 f953 	bl	8000980 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <ADC1_2_IRQHandler+0x18>)
 80006dc:	f000 f950 	bl	8000980 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	20000058 	.word	0x20000058

080006ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006f0:	4802      	ldr	r0, [pc, #8]	@ (80006fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006f2:	f000 febc 	bl	800146e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000088 	.word	0x20000088

08000700 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <TIM1_UP_IRQHandler+0x10>)
 8000706:	f002 fed5 	bl	80034b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000378 	.word	0x20000378

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000720:	f7ff fff8 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000726:	490c      	ldr	r1, [pc, #48]	@ (8000758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <LoopFillZerobss+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a09      	ldr	r2, [pc, #36]	@ (8000760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800073c:	4c09      	ldr	r4, [pc, #36]	@ (8000764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074a:	f004 fd23 	bl	8005194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fcfd 	bl	800014c <main>
  bx lr
 8000752:	4770      	bx	lr
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800075c:	08005228 	.word	0x08005228
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000764:	200003c4 	.word	0x200003c4

08000768 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <CAN1_RX1_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 fbbd 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f7ff ff04 	bl	8000590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fe34 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a03      	ldr	r2, [pc, #12]	@ (80007b8 <HAL_IncTick+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000008 	.word	0x20000008
 80007b8:	200003c0 	.word	0x200003c0

080007bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	200003c0 	.word	0x200003c0

080007d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d101      	bne.n	80007f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e0be      	b.n	8000970 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d109      	bne.n	8000814 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fe22 	bl	8000458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fa7d 	bl	8000d14 <ADC_ConversionStop_Disable>
 800081a:	4603      	mov	r3, r0
 800081c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	2b00      	cmp	r3, #0
 8000828:	f040 8099 	bne.w	800095e <HAL_ADC_Init+0x18e>
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	2b00      	cmp	r3, #0
 8000830:	f040 8095 	bne.w	800095e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000838:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800083c:	f023 0302 	bic.w	r3, r3, #2
 8000840:	f043 0202 	orr.w	r2, r3, #2
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000850:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7b1b      	ldrb	r3, [r3, #12]
 8000856:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000858:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	4313      	orrs	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000868:	d003      	beq.n	8000872 <HAL_ADC_Init+0xa2>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d102      	bne.n	8000878 <HAL_ADC_Init+0xa8>
 8000872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000876:	e000      	b.n	800087a <HAL_ADC_Init+0xaa>
 8000878:	2300      	movs	r3, #0
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7d1b      	ldrb	r3, [r3, #20]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d119      	bne.n	80008bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7b1b      	ldrb	r3, [r3, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d109      	bne.n	80008a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	3b01      	subs	r3, #1
 8000896:	035a      	lsls	r2, r3, #13
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4313      	orrs	r3, r2
 800089c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	e00b      	b.n	80008bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a8:	f043 0220 	orr.w	r2, r3, #32
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b4:	f043 0201 	orr.w	r2, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	430a      	orrs	r2, r1
 80008ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <HAL_ADC_Init+0x1a8>)
 80008d8:	4013      	ands	r3, r2
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008ec:	d003      	beq.n	80008f6 <HAL_ADC_Init+0x126>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d104      	bne.n	8000900 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	051b      	lsls	r3, r3, #20
 80008fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000906:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	430a      	orrs	r2, r1
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_ADC_Init+0x1ac>)
 800091c:	4013      	ands	r3, r2
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	429a      	cmp	r2, r3
 8000922:	d10b      	bne.n	800093c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092e:	f023 0303 	bic.w	r3, r3, #3
 8000932:	f043 0201 	orr.w	r2, r3, #1
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800093a:	e018      	b.n	800096e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000940:	f023 0312 	bic.w	r3, r3, #18
 8000944:	f043 0210 	orr.w	r2, r3, #16
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000950:	f043 0201 	orr.w	r2, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800095c:	e007      	b.n	800096e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000962:	f043 0210 	orr.w	r2, r3, #16
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800096e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	ffe1f7fd 	.word	0xffe1f7fd
 800097c:	ff1f0efe 	.word	0xff1f0efe

08000980 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d03e      	beq.n	8000a20 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d039      	beq.n	8000a20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b0:	f003 0310 	and.w	r3, r3, #16
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d105      	bne.n	80009c4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80009ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80009d2:	d11d      	bne.n	8000a10 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d119      	bne.n	8000a10 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0220 	bic.w	r2, r2, #32
 80009ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d105      	bne.n	8000a10 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a08:	f043 0201 	orr.w	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 f874 	bl	8000afe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f06f 0212 	mvn.w	r2, #18
 8000a1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d04d      	beq.n	8000ac6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d048      	beq.n	8000ac6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d105      	bne.n	8000a4c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000a56:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000a5a:	d012      	beq.n	8000a82 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d125      	bne.n	8000ab6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000a74:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a78:	d11d      	bne.n	8000ab6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d119      	bne.n	8000ab6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f96d 	bl	8000d96 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f06f 020c 	mvn.w	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d012      	beq.n	8000af6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ade:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f812 	bl	8000b10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f06f 0201 	mvn.w	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_ADC_ConfigChannel+0x20>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e0dc      	b.n	8000cfe <HAL_ADC_ConfigChannel+0x1da>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d81c      	bhi.n	8000b8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	3b05      	subs	r3, #5
 8000b66:	221f      	movs	r2, #31
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4019      	ands	r1, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	3b05      	subs	r3, #5
 8000b80:	fa00 f203 	lsl.w	r2, r0, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b8c:	e03c      	b.n	8000c08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b0c      	cmp	r3, #12
 8000b94:	d81c      	bhi.n	8000bd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b23      	subs	r3, #35	@ 0x23
 8000ba8:	221f      	movs	r2, #31
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	4019      	ands	r1, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3b23      	subs	r3, #35	@ 0x23
 8000bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bce:	e01b      	b.n	8000c08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b41      	subs	r3, #65	@ 0x41
 8000be2:	221f      	movs	r2, #31
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4019      	ands	r1, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3b41      	subs	r3, #65	@ 0x41
 8000bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b09      	cmp	r3, #9
 8000c0e:	d91c      	bls.n	8000c4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68d9      	ldr	r1, [r3, #12]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	3b1e      	subs	r3, #30
 8000c22:	2207      	movs	r2, #7
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	4019      	ands	r1, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6898      	ldr	r0, [r3, #8]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	3b1e      	subs	r3, #30
 8000c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	e019      	b.n	8000c7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6919      	ldr	r1, [r3, #16]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4019      	ands	r1, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	6898      	ldr	r0, [r3, #8]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	fa00 f203 	lsl.w	r2, r0, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b10      	cmp	r3, #16
 8000c84:	d003      	beq.n	8000c8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c8a:	2b11      	cmp	r3, #17
 8000c8c:	d132      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1d      	ldr	r2, [pc, #116]	@ (8000d08 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d125      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d126      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000cb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b10      	cmp	r3, #16
 8000cbc:	d11a      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_ADC_ConfigChannel+0x1e8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	0c9a      	lsrs	r2, r3, #18
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cd4:	e002      	b.n	8000cdc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f9      	bne.n	8000cd6 <HAL_ADC_ConfigChannel+0x1b2>
 8000ce2:	e007      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce8:	f043 0220 	orr.w	r2, r3, #32
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40012400 	.word	0x40012400
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	431bde83 	.word	0x431bde83

08000d14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d12e      	bne.n	8000d8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0201 	bic.w	r2, r2, #1
 8000d3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d3e:	f7ff fd3d 	bl	80007bc <HAL_GetTick>
 8000d42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d44:	e01b      	b.n	8000d7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d46:	f7ff fd39 	bl	80007bc <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d914      	bls.n	8000d7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10d      	bne.n	8000d7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d66:	f043 0210 	orr.w	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d72:	f043 0201 	orr.w	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e007      	b.n	8000d8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d0dc      	beq.n	8000d46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4906      	ldr	r1, [pc, #24]	@ (8000e40 <__NVIC_EnableIRQ+0x34>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff4f 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff64 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ffb2 	bl	8000e98 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff81 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff57 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b08b      	sub	sp, #44	@ 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e169      	b.n	8001250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8158 	bne.w	800124a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a9a      	ldr	r2, [pc, #616]	@ (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d05e      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a98      	ldr	r2, [pc, #608]	@ (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d875      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000faa:	4a98      	ldr	r2, [pc, #608]	@ (800120c <HAL_GPIO_Init+0x2a4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d058      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fb0:	4a96      	ldr	r2, [pc, #600]	@ (800120c <HAL_GPIO_Init+0x2a4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d86f      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fb6:	4a96      	ldr	r2, [pc, #600]	@ (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d052      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fbc:	4a94      	ldr	r2, [pc, #592]	@ (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d869      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fc2:	4a94      	ldr	r2, [pc, #592]	@ (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d04c      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a92      	ldr	r2, [pc, #584]	@ (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d863      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fce:	4a92      	ldr	r2, [pc, #584]	@ (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d046      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a90      	ldr	r2, [pc, #576]	@ (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d85d      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d82a      	bhi.n	8001034 <HAL_GPIO_Init+0xcc>
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d859      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe8 <HAL_GPIO_Init+0x80>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08001063 	.word	0x08001063
 8000fec:	0800103d 	.word	0x0800103d
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	08001091 	.word	0x08001091
 8000ff8:	08001097 	.word	0x08001097
 8000ffc:	08001097 	.word	0x08001097
 8001000:	08001097 	.word	0x08001097
 8001004:	08001097 	.word	0x08001097
 8001008:	08001097 	.word	0x08001097
 800100c:	08001097 	.word	0x08001097
 8001010:	08001097 	.word	0x08001097
 8001014:	08001097 	.word	0x08001097
 8001018:	08001097 	.word	0x08001097
 800101c:	08001097 	.word	0x08001097
 8001020:	08001097 	.word	0x08001097
 8001024:	08001097 	.word	0x08001097
 8001028:	08001097 	.word	0x08001097
 800102c:	08001045 	.word	0x08001045
 8001030:	08001059 	.word	0x08001059
 8001034:	4a79      	ldr	r2, [pc, #484]	@ (800121c <HAL_GPIO_Init+0x2b4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800103a:	e02c      	b.n	8001096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e029      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	3304      	adds	r3, #4
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e024      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e01f      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e01a      	b.n	8001098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106a:	2304      	movs	r3, #4
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e013      	b.n	8001098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001078:	2308      	movs	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	611a      	str	r2, [r3, #16]
          break;
 8001082:	e009      	b.n	8001098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	615a      	str	r2, [r3, #20]
          break;
 800108e:	e003      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x130>
          break;
 8001096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2bff      	cmp	r3, #255	@ 0xff
 800109c:	d801      	bhi.n	80010a2 <HAL_GPIO_Init+0x13a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e001      	b.n	80010a6 <HAL_GPIO_Init+0x13e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	@ 0xff
 80010ac:	d802      	bhi.n	80010b4 <HAL_GPIO_Init+0x14c>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x152>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	3b08      	subs	r3, #8
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	210f      	movs	r1, #15
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	6a39      	ldr	r1, [r7, #32]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80b1 	beq.w	800124a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001220 <HAL_GPIO_Init+0x2b8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001100:	4a48      	ldr	r2, [pc, #288]	@ (8001224 <HAL_GPIO_Init+0x2bc>)
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a40      	ldr	r2, [pc, #256]	@ (8001228 <HAL_GPIO_Init+0x2c0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1ec>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3f      	ldr	r2, [pc, #252]	@ (800122c <HAL_GPIO_Init+0x2c4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1e8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3e      	ldr	r2, [pc, #248]	@ (8001230 <HAL_GPIO_Init+0x2c8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3d      	ldr	r2, [pc, #244]	@ (8001234 <HAL_GPIO_Init+0x2cc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1e0>
 8001144:	2303      	movs	r3, #3
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001148:	2304      	movs	r3, #4
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001154:	2300      	movs	r3, #0
 8001156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001166:	492f      	ldr	r1, [pc, #188]	@ (8001224 <HAL_GPIO_Init+0x2bc>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001180:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	492c      	ldr	r1, [pc, #176]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	4928      	ldr	r1, [pc, #160]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 8001198:	4013      	ands	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a8:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	4922      	ldr	r1, [pc, #136]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60cb      	str	r3, [r1, #12]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	491e      	ldr	r1, [pc, #120]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4918      	ldr	r1, [pc, #96]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4914      	ldr	r1, [pc, #80]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	490e      	ldr	r1, [pc, #56]	@ (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e021      	b.n	800124a <HAL_GPIO_Init+0x2e2>
 8001206:	bf00      	nop
 8001208:	10320000 	.word	0x10320000
 800120c:	10310000 	.word	0x10310000
 8001210:	10220000 	.word	0x10220000
 8001214:	10210000 	.word	0x10210000
 8001218:	10120000 	.word	0x10120000
 800121c:	10110000 	.word	0x10110000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40011400 	.word	0x40011400
 8001238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_GPIO_Init+0x304>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	43db      	mvns	r3, r3
 8001244:	4909      	ldr	r1, [pc, #36]	@ (800126c <HAL_GPIO_Init+0x304>)
 8001246:	4013      	ands	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	3301      	adds	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f ae8e 	bne.w	8000f7c <HAL_GPIO_Init+0x14>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	372c      	adds	r7, #44	@ 0x2c
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b08b      	sub	sp, #44	@ 0x2c
 8001274:	af06      	add	r7, sp, #24
 8001276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0f1      	b.n	8001466 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff f954 	bl	8000544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fab3 	bl	8003814 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	687e      	ldr	r6, [r7, #4]
 80012b6:	466d      	mov	r5, sp
 80012b8:	f106 0410 	add.w	r4, r6, #16
 80012bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	1d33      	adds	r3, r6, #4
 80012c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c8:	6838      	ldr	r0, [r7, #0]
 80012ca:	f002 fa93 	bl	80037f4 <USB_CoreInit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0c2      	b.n	8001466 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 faae 	bl	8003848 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e040      	b.n	8001374 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	3301      	adds	r3, #1
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3303      	adds	r3, #3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	3338      	adds	r3, #56	@ 0x38
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	333c      	adds	r3, #60	@ 0x3c
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3340      	adds	r3, #64	@ 0x40
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3301      	adds	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3b9      	bcc.n	80012f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e044      	b.n	800140e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3b5      	bcc.n	8001384 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	687e      	ldr	r6, [r7, #4]
 8001420:	466d      	mov	r5, sp
 8001422:	f106 0410 	add.w	r4, r6, #16
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	602b      	str	r3, [r5, #0]
 800142e:	1d33      	adds	r3, r6, #4
 8001430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f002 fa14 	bl	8003860 <USB_DevInit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00d      	b.n	8001466 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fde2 	bl	8005028 <USB_DevDisconnect>

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b088      	sub	sp, #32
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fdde 	bl	800503c <USB_ReadInterrupts>
 8001480:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f986 	bl	800179e <PCD_EP_ISR_Handler>

    return;
 8001492:	e119      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149a:	2b00      	cmp	r3, #0
 800149c:	d013      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f931 	bl	800171e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014bc:	2100      	movs	r1, #0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f948 	bl	8001754 <HAL_PCD_SetAddress>

    return;
 80014c4:	e100      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014e2:	b292      	uxth	r2, r2
 80014e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014e8:	e0ee      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00c      	beq.n	800150e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800150c:	e0dc      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d027      	beq.n	8001568 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	b292      	uxth	r2, r2
 800152c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0208 	bic.w	r2, r2, #8
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f8fa 	bl	8001742 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001556:	b29a      	uxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001560:	b292      	uxth	r2, r2
 8001562:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001566:	e0af      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8083 	beq.w	800167a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
 8001578:	e010      	b.n	800159c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	441a      	add	r2, r3
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	b292      	uxth	r2, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	3320      	adds	r3, #32
 8001590:	443b      	add	r3, r7
 8001592:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	3301      	adds	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d9eb      	bls.n	800157a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	b292      	uxth	r2, r2
 80015ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80015d2:	bf00      	nop
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f6      	beq.n	80015d4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	77fb      	strb	r3, [r7, #31]
 8001602:	e00f      	b.n	8001624 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	4611      	mov	r1, r2
 800160c:	7ffa      	ldrb	r2, [r7, #31]
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	440a      	add	r2, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3320      	adds	r3, #32
 8001616:	443b      	add	r3, r7
 8001618:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800161c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800161e:	7ffb      	ldrb	r3, [r7, #31]
 8001620:	3301      	adds	r3, #1
 8001622:	77fb      	strb	r3, [r7, #31]
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	2b07      	cmp	r3, #7
 8001628:	d9ec      	bls.n	8001604 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001632:	b29a      	uxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0208 	orr.w	r2, r2, #8
 800163c:	b292      	uxth	r2, r2
 800163e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0204 	orr.w	r2, r2, #4
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f85c 	bl	8001730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001678:	e026      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00f      	beq.n	80016a4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001696:	b292      	uxth	r2, r2
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f835 	bl	800170c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016a2:	e011      	b.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00c      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80016c6:	bf00      	nop
  }
}
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_PCD_SetAddress+0x1a>
 800176a:	2302      	movs	r3, #2
 800176c:	e013      	b.n	8001796 <HAL_PCD_SetAddress+0x42>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fc3b 	bl	8005002 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b096      	sub	sp, #88	@ 0x58
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017a6:	e3be      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80017c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 8178 	bne.w	8001abc <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d151      	bne.n	800187c <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80017e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017e8:	81fb      	strh	r3, [r7, #14]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3328      	adds	r3, #40	@ 0x28
 8001800:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	3302      	adds	r3, #2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800182a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800182e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	441a      	add	r2, r3
 8001838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff50 	bl	80016e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 836a 	beq.w	8001f26 <PCD_EP_ISR_Handler+0x788>
 8001852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 8365 	bne.w	8001f26 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001868:	b2da      	uxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800187a:	e354      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001882:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800188e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001896:	2b00      	cmp	r3, #0
 8001898:	d034      	beq.n	8001904 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	3306      	adds	r3, #6
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80018d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f003 fc03 	bl	80050e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018ea:	4013      	ands	r3, r2
 80018ec:	823b      	strh	r3, [r7, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	8a3a      	ldrh	r2, [r7, #16]
 80018f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018f8:	b292      	uxth	r2, r2
 80018fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fefc 	bl	80016fa <HAL_PCD_SetupStageCallback>
 8001902:	e310      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001904:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001908:	2b00      	cmp	r3, #0
 800190a:	f280 830c 	bge.w	8001f26 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29a      	uxth	r2, r3
 8001916:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800191a:	4013      	ands	r3, r2
 800191c:	83fb      	strh	r3, [r7, #30]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	8bfa      	ldrh	r2, [r7, #30]
 8001924:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001928:	b292      	uxth	r2, r2
 800192a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	3306      	adds	r3, #6
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001956:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d019      	beq.n	8001994 <PCD_EP_ISR_Handler+0x1f6>
 8001960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d015      	beq.n	8001994 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196e:	6959      	ldr	r1, [r3, #20]
 8001970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001972:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001976:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001978:	b29b      	uxth	r3, r3
 800197a:	f003 fbb3 	bl	80050e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800197e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	441a      	add	r2, r3
 8001988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fe9d 	bl	80016ce <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800199e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 82bd 	bne.w	8001f26 <PCD_EP_ISR_Handler+0x788>
 80019ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019b0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80019b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80019b8:	f000 82b5 	beq.w	8001f26 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4413      	add	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	801a      	strh	r2, [r3, #0]
 80019ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80019f2:	d91d      	bls.n	8001a30 <PCD_EP_ISR_Handler+0x292>
 80019f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80019fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <PCD_EP_ISR_Handler+0x270>
 8001a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	e026      	b.n	8001a7e <PCD_EP_ISR_Handler+0x2e0>
 8001a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <PCD_EP_ISR_Handler+0x2b0>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	e017      	b.n	8001a7e <PCD_EP_ISR_Handler+0x2e0>
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <PCD_EP_ISR_Handler+0x2ca>
 8001a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a64:	3301      	adds	r3, #1
 8001a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a8e:	827b      	strh	r3, [r7, #18]
 8001a90:	8a7b      	ldrh	r3, [r7, #18]
 8001a92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a96:	827b      	strh	r3, [r7, #18]
 8001a98:	8a7b      	ldrh	r3, [r7, #18]
 8001a9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a9e:	827b      	strh	r3, [r7, #18]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	8a7b      	ldrh	r3, [r7, #18]
 8001aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	8013      	strh	r3, [r2, #0]
 8001aba:	e234      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ad0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f280 80fc 	bge.w	8001cd2 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001af0:	4013      	ands	r3, r2
 8001af2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001b08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b10:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b28:	7b1b      	ldrb	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d125      	bne.n	8001b7a <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	3306      	adds	r3, #6
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8092 	beq.w	8001c88 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6a:	6959      	ldr	r1, [r3, #20]
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	88da      	ldrh	r2, [r3, #6]
 8001b70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b74:	f003 fab6 	bl	80050e4 <USB_ReadPMA>
 8001b78:	e086      	b.n	8001c88 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7c:	78db      	ldrb	r3, [r3, #3]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d10a      	bne.n	8001b98 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b86:	461a      	mov	r2, r3
 8001b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f9d9 	bl	8001f42 <HAL_PCD_EP_DB_Receive>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b96:	e077      	b.n	8001c88 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	441a      	add	r2, r3
 8001bc4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d024      	beq.n	8001c40 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d02e      	beq.n	8001c88 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c30:	6959      	ldr	r1, [r3, #20]
 8001c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c34:	891a      	ldrh	r2, [r3, #8]
 8001c36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c3a:	f003 fa53 	bl	80050e4 <USB_ReadPMA>
 8001c3e:	e023      	b.n	8001c88 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	3306      	adds	r3, #6
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7a:	6959      	ldr	r1, [r3, #20]
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7e:	895a      	ldrh	r2, [r3, #10]
 8001c80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c84:	f003 fa2e 	bl	80050e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c90:	441a      	add	r2, r3
 8001c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c9e:	441a      	add	r2, r3
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <PCD_EP_ISR_Handler+0x51a>
 8001cac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d206      	bcs.n	8001cc6 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fd05 	bl	80016ce <HAL_PCD_DataOutStageCallback>
 8001cc4:	e005      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 fde7 	bl	80038a0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8123 	beq.w	8001f26 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ce0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	441a      	add	r2, r3
 8001d20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f040 80a2 	bne.w	8001e7e <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	7b1b      	ldrb	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8093 	beq.w	8001e70 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d046      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d126      	bne.n	8001dac <PCD_EP_ISR_Handler+0x60e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	4413      	add	r3, r2
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	011a      	lsls	r2, r3, #4
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	4413      	add	r3, r2
 8001d80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e061      	b.n	8001e70 <PCD_EP_ISR_Handler+0x6d2>
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	785b      	ldrb	r3, [r3, #1]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d15d      	bne.n	8001e70 <PCD_EP_ISR_Handler+0x6d2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc8:	4413      	add	r3, r2
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	011a      	lsls	r2, r3, #4
 8001dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dde:	2200      	movs	r2, #0
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	e045      	b.n	8001e70 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d126      	bne.n	8001e40 <PCD_EP_ISR_Handler+0x6a2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e06:	4413      	add	r3, r2
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	011a      	lsls	r2, r3, #4
 8001e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e12:	4413      	add	r3, r2
 8001e14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3c:	801a      	strh	r2, [r3, #0]
 8001e3e:	e017      	b.n	8001e70 <PCD_EP_ISR_Handler+0x6d2>
 8001e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e42:	785b      	ldrb	r3, [r3, #1]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d113      	bne.n	8001e70 <PCD_EP_ISR_Handler+0x6d2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e56:	4413      	add	r3, r2
 8001e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	011a      	lsls	r2, r3, #4
 8001e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e62:	4413      	add	r3, r2
 8001e64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fc34 	bl	80016e4 <HAL_PCD_DataInStageCallback>
 8001e7c:	e053      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d146      	bne.n	8001f18 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d907      	bls.n	8001ed2 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001eca:	1ad2      	subs	r2, r2, r3
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ece:	619a      	str	r2, [r3, #24]
 8001ed0:	e002      	b.n	8001ed8 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fbfc 	bl	80016e4 <HAL_PCD_DataInStageCallback>
 8001eec:	e01b      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ef6:	441a      	add	r2, r3
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f04:	441a      	add	r2, r3
 8001f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f08:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fcc5 	bl	80038a0 <USB_EPStartXfer>
 8001f16:	e006      	b.n	8001f26 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f91b 	bl	800215c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f6ff ac38 	blt.w	80017a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3758      	adds	r7, #88	@ 0x58
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b088      	sub	sp, #32
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d07e      	beq.n	8002058 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	8b7b      	ldrh	r3, [r7, #26]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d306      	bcc.n	8001f9c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	8b7b      	ldrh	r3, [r7, #26]
 8001f94:	1ad2      	subs	r2, r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	e002      	b.n	8001fa2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d123      	bne.n	8001ff2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fc4:	833b      	strh	r3, [r7, #24]
 8001fc6:	8b3b      	ldrh	r3, [r7, #24]
 8001fc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fcc:	833b      	strh	r3, [r7, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	441a      	add	r2, r3
 8001fdc:	8b3b      	ldrh	r3, [r7, #24]
 8001fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01f      	beq.n	800203c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002016:	82fb      	strh	r3, [r7, #22]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	441a      	add	r2, r3
 8002026:	8afb      	ldrh	r3, [r7, #22]
 8002028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800202c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002034:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002038:	b29b      	uxth	r3, r3
 800203a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800203c:	8b7b      	ldrh	r3, [r7, #26]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8087 	beq.w	8002152 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6959      	ldr	r1, [r3, #20]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	891a      	ldrh	r2, [r3, #8]
 8002050:	8b7b      	ldrh	r3, [r7, #26]
 8002052:	f003 f847 	bl	80050e4 <USB_ReadPMA>
 8002056:	e07c      	b.n	8002152 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	3306      	adds	r3, #6
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002080:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	8b7b      	ldrh	r3, [r7, #26]
 8002088:	429a      	cmp	r2, r3
 800208a:	d306      	bcc.n	800209a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	8b7b      	ldrh	r3, [r7, #26]
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	e002      	b.n	80020a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d123      	bne.n	80020f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c2:	83fb      	strh	r3, [r7, #30]
 80020c4:	8bfb      	ldrh	r3, [r7, #30]
 80020c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020ca:	83fb      	strh	r3, [r7, #30]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	8bfb      	ldrh	r3, [r7, #30]
 80020dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11f      	bne.n	800213a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002114:	83bb      	strh	r3, [r7, #28]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	441a      	add	r2, r3
 8002124:	8bbb      	ldrh	r3, [r7, #28]
 8002126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800212a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800212e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002132:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002136:	b29b      	uxth	r3, r3
 8002138:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800213a:	8b7b      	ldrh	r3, [r7, #26]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6959      	ldr	r1, [r3, #20]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	895a      	ldrh	r2, [r3, #10]
 800214c:	8b7b      	ldrh	r3, [r7, #26]
 800214e:	f002 ffc9 	bl	80050e4 <USB_ReadPMA>
    }
  }

  return count;
 8002152:	8b7b      	ldrh	r3, [r7, #26]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0a4      	sub	sp, #144	@ 0x90
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	4613      	mov	r3, r2
 8002168:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 81dd 	beq.w	8002530 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	3302      	adds	r3, #2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d907      	bls.n	80021be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	e002      	b.n	80021c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 80b9 	bne.w	8002340 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d126      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	4413      	add	r3, r2
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	011a      	lsls	r2, r3, #4
 80021f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f6:	4413      	add	r3, r2
 80021f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002208:	b29a      	uxth	r2, r3
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221c:	b29a      	uxth	r2, r3
 800221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e01a      	b.n	800225a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d116      	bne.n	800225a <HAL_PCD_EP_DB_Transmit+0xfe>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	637b      	str	r3, [r7, #52]	@ 0x34
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002240:	4413      	add	r3, r2
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	011a      	lsls	r2, r3, #4
 800224a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224c:	4413      	add	r3, r2
 800224e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30
 8002254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002256:	2200      	movs	r2, #0
 8002258:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d126      	bne.n	80022b6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	011a      	lsls	r2, r3, #4
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229a:	b29a      	uxth	r2, r3
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	801a      	strh	r2, [r3, #0]
 80022b4:	e017      	b.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d113      	bne.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	4413      	add	r3, r2
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	011a      	lsls	r2, r3, #4
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	4413      	add	r3, r2
 80022da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff f9f9 	bl	80016e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 82fc 	beq.w	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002318:	82fb      	strh	r3, [r7, #22]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	441a      	add	r2, r3
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800232e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002332:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800233a:	b29b      	uxth	r3, r3
 800233c:	8013      	strh	r3, [r2, #0]
 800233e:	e2da      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d021      	beq.n	800238e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002364:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	441a      	add	r2, r3
 8002376:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800237a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800237e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002382:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800238a:	b29b      	uxth	r3, r3
 800238c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 82ae 	bne.w	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023a2:	441a      	add	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023b0:	441a      	add	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d30b      	bcc.n	80023da <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	621a      	str	r2, [r3, #32]
 80023d8:	e017      	b.n	800240a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d108      	bne.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023f2:	e00a      	b.n	800240a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d165      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x382>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002426:	4413      	add	r3, r2
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	011a      	lsls	r2, r3, #4
 8002430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002432:	4413      	add	r3, r2
 8002434:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800244e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002450:	d91d      	bls.n	800248e <HAL_PCD_EP_DB_Transmit+0x332>
 8002452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800245a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x310>
 8002466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002468:	3b01      	subs	r3, #1
 800246a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800246c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29a      	uxth	r2, r3
 8002472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002474:	b29b      	uxth	r3, r3
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	b29b      	uxth	r3, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29a      	uxth	r2, r3
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e044      	b.n	8002518 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800248e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_PCD_EP_DB_Transmit+0x350>
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a8:	801a      	strh	r2, [r3, #0]
 80024aa:	e035      	b.n	8002518 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80024c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024c2:	3301      	adds	r3, #1
 80024c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024da:	801a      	strh	r2, [r3, #0]
 80024dc:	e01c      	b.n	8002518 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d118      	bne.n	8002518 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fa:	4413      	add	r3, r2
 80024fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	011a      	lsls	r2, r3, #4
 8002504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002506:	4413      	add	r3, r2
 8002508:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800250c:	643b      	str	r3, [r7, #64]	@ 0x40
 800250e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002512:	b29a      	uxth	r2, r3
 8002514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002516:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6959      	ldr	r1, [r3, #20]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	891a      	ldrh	r2, [r3, #8]
 8002524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002528:	b29b      	uxth	r3, r3
 800252a:	f002 fd96 	bl	800505a <USB_WritePMA>
 800252e:	e1e2      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	3306      	adds	r3, #6
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002558:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002564:	429a      	cmp	r2, r3
 8002566:	d307      	bcc.n	8002578 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	619a      	str	r2, [r3, #24]
 8002576:	e002      	b.n	800257e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80c0 	bne.w	8002708 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d126      	bne.n	80025de <HAL_PCD_EP_DB_Transmit+0x482>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025a4:	4413      	add	r3, r2
 80025a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	011a      	lsls	r2, r3, #4
 80025ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b0:	4413      	add	r3, r2
 80025b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	e01a      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d116      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025fa:	4413      	add	r3, r2
 80025fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	011a      	lsls	r2, r3, #4
 8002604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002606:	4413      	add	r3, r2
 8002608:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
 800260e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002610:	2200      	movs	r2, #0
 8002612:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	677b      	str	r3, [r7, #116]	@ 0x74
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12b      	bne.n	800267a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002636:	4413      	add	r3, r2
 8002638:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	011a      	lsls	r2, r3, #4
 8002640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002642:	4413      	add	r3, r2
 8002644:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800264c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	b29a      	uxth	r2, r3
 800265a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002670:	b29a      	uxth	r2, r3
 8002672:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	e017      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x54e>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d113      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x54e>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002690:	4413      	add	r3, r2
 8002692:	677b      	str	r3, [r7, #116]	@ 0x74
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	011a      	lsls	r2, r3, #4
 800269a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800269c:	4413      	add	r3, r2
 800269e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80026a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff f817 	bl	80016e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 811a 	bne.w	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026dc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002702:	b29b      	uxth	r3, r3
 8002704:	8013      	strh	r3, [r2, #0]
 8002706:	e0f6      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d121      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800272c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	441a      	add	r2, r3
 800273e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800274a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800274e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002752:	b29b      	uxth	r3, r3
 8002754:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800275c:	2b01      	cmp	r3, #1
 800275e:	f040 80ca 	bne.w	80028f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800276a:	441a      	add	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002778:	441a      	add	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6a1a      	ldr	r2, [r3, #32]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	429a      	cmp	r2, r3
 8002788:	d30b      	bcc.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6a1a      	ldr	r2, [r3, #32]
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	621a      	str	r2, [r3, #32]
 80027a0:	e017      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80027aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80027ba:	e00a      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d165      	bne.n	80028ac <HAL_PCD_EP_DB_Transmit+0x750>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f4:	4413      	add	r3, r2
 80027f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	011a      	lsls	r2, r3, #4
 80027fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002800:	4413      	add	r3, r2
 8002802:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002808:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	b29a      	uxth	r2, r3
 8002814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281c:	2b3e      	cmp	r3, #62	@ 0x3e
 800281e:	d91d      	bls.n	800285c <HAL_PCD_EP_DB_Transmit+0x700>
 8002820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002836:	3b01      	subs	r3, #1
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800283a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29a      	uxth	r2, r3
 8002840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002842:	b29b      	uxth	r3, r3
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	b29b      	uxth	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002854:	b29a      	uxth	r2, r3
 8002856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	e041      	b.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x784>
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800286e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002872:	b29a      	uxth	r2, r3
 8002874:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	e032      	b.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x784>
 800287a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_PCD_EP_DB_Transmit+0x738>
 800288e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002890:	3301      	adds	r3, #1
 8002892:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29a      	uxth	r2, r3
 800289a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800289c:	b29b      	uxth	r3, r3
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	e019      	b.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x784>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d115      	bne.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x784>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c2:	4413      	add	r3, r2
 80028c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80028d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028da:	b29a      	uxth	r2, r3
 80028dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	6959      	ldr	r1, [r3, #20]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	895a      	ldrh	r2, [r3, #10]
 80028ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f002 fbb2 	bl	800505a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800290c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002910:	82bb      	strh	r3, [r7, #20]
 8002912:	8abb      	ldrh	r3, [r7, #20]
 8002914:	f083 0310 	eor.w	r3, r3, #16
 8002918:	82bb      	strh	r3, [r7, #20]
 800291a:	8abb      	ldrh	r3, [r7, #20]
 800291c:	f083 0320 	eor.w	r3, r3, #32
 8002920:	82bb      	strh	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	8abb      	ldrh	r3, [r7, #20]
 8002932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800293a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002942:	b29b      	uxth	r3, r3
 8002944:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3790      	adds	r7, #144	@ 0x90
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e272      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8087 	beq.w	8002a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002970:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b04      	cmp	r3, #4
 800297a:	d00c      	beq.n	8002996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800297c:	4b8f      	ldr	r3, [pc, #572]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d112      	bne.n	80029ae <HAL_RCC_OscConfig+0x5e>
 8002988:	4b8c      	ldr	r3, [pc, #560]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d10b      	bne.n	80029ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d06c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x12c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d168      	bne.n	8002a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e24c      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x76>
 80029b8:	4b80      	ldr	r3, [pc, #512]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a7f      	ldr	r2, [pc, #508]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e02e      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x98>
 80029ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7a      	ldr	r2, [pc, #488]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b78      	ldr	r3, [pc, #480]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a77      	ldr	r2, [pc, #476]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0xbc>
 80029f2:	4b72      	ldr	r3, [pc, #456]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a71      	ldr	r2, [pc, #452]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b6f      	ldr	r3, [pc, #444]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6e      	ldr	r2, [pc, #440]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b68      	ldr	r3, [pc, #416]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a67      	ldr	r2, [pc, #412]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fd fec6 	bl	80007bc <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fd fec2 	bl	80007bc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e200      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b5d      	ldr	r3, [pc, #372]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xe4>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fd feb2 	bl	80007bc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fd feae 	bl	80007bc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1ec      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b53      	ldr	r3, [pc, #332]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x10c>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a96:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x18c>
 8002aa2:	4b46      	ldr	r3, [pc, #280]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b43      	ldr	r3, [pc, #268]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1c0      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4939      	ldr	r1, [pc, #228]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b36      	ldr	r3, [pc, #216]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fd fe67 	bl	80007bc <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fd fe63 	bl	80007bc <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1a1      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2d      	ldr	r3, [pc, #180]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4927      	ldr	r1, [pc, #156]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fd fe46 	bl	80007bc <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fd fe42 	bl	80007bc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e180      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03a      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d019      	beq.n	8002b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fd fe26 	bl	80007bc <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fd fe22 	bl	80007bc <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e160      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f000 fb0a 	bl	80031ac <RCC_Delay>
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7fd fe0c 	bl	80007bc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fd fe08 	bl	80007bc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d908      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e146      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	42420000 	.word	0x42420000
 8002bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b92      	ldr	r3, [pc, #584]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e9      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a6 	beq.w	8002d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b8b      	ldr	r3, [pc, #556]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a87      	ldr	r2, [pc, #540]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]
 8002bfe:	4b85      	ldr	r3, [pc, #532]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b82      	ldr	r3, [pc, #520]	@ (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fd fdc9 	bl	80007bc <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fd fdc5 	bl	80007bc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b64      	cmp	r3, #100	@ 0x64
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e103      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b75      	ldr	r3, [pc, #468]	@ (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x312>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	e02d      	b.n	8002cbe <HAL_RCC_OscConfig+0x36e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x334>
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a69      	ldr	r2, [pc, #420]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	4b67      	ldr	r3, [pc, #412]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a66      	ldr	r2, [pc, #408]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6213      	str	r3, [r2, #32]
 8002c82:	e01c      	b.n	8002cbe <HAL_RCC_OscConfig+0x36e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x356>
 8002c8c:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a60      	ldr	r2, [pc, #384]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	4b5e      	ldr	r3, [pc, #376]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e00b      	b.n	8002cbe <HAL_RCC_OscConfig+0x36e>
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a5a      	ldr	r2, [pc, #360]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d015      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fd fd79 	bl	80007bc <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fd fd75 	bl	80007bc <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0b1      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ee      	beq.n	8002cce <HAL_RCC_OscConfig+0x37e>
 8002cf0:	e014      	b.n	8002d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fd fd63 	bl	80007bc <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd fd5f 	bl	80007bc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e09b      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	4b40      	ldr	r3, [pc, #256]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b3c      	ldr	r3, [pc, #240]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a3b      	ldr	r2, [pc, #236]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8087 	beq.w	8002e46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d061      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d146      	bne.n	8002dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4c:	4b33      	ldr	r3, [pc, #204]	@ (8002e1c <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fd fd33 	bl	80007bc <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fd fd2f 	bl	80007bc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e06d      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6c:	4b29      	ldr	r3, [pc, #164]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d80:	d108      	bne.n	8002d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4921      	ldr	r1, [pc, #132]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d94:	4b1f      	ldr	r3, [pc, #124]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a19      	ldr	r1, [r3, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	430b      	orrs	r3, r1
 8002da6:	491b      	ldr	r1, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd fd03 	bl	80007bc <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd fcff 	bl	80007bc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e03d      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x46a>
 8002dd8:	e035      	b.n	8002e46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fd fcec 	bl	80007bc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fd fce8 	bl	80007bc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e026      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x498>
 8002e06:	e01e      	b.n	8002e46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e019      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_OscConfig+0x500>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0d0      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b6a      	ldr	r3, [pc, #424]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b67      	ldr	r3, [pc, #412]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4965      	ldr	r1, [pc, #404]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d040      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b41      	ldr	r3, [pc, #260]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e073      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3d      	ldr	r3, [pc, #244]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4936      	ldr	r1, [pc, #216]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7fd fc3a 	bl	80007bc <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fd fc36 	bl	80007bc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e053      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d210      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b24      	ldr	r3, [pc, #144]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 0207 	bic.w	r2, r3, #7
 8002f8a:	4922      	ldr	r1, [pc, #136]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f82d 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <HAL_RCC_ClockConfig+0x1cc>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <HAL_RCC_ClockConfig+0x1d0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fac4 	bl	8000590 <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40022000 	.word	0x40022000
 8003018:	40021000 	.word	0x40021000
 800301c:	080051f4 	.word	0x080051f4
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_RCC_EnableCSS+0x14>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	4242004c 	.word	0x4242004c

08003040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800305a:	4b1e      	ldr	r3, [pc, #120]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d002      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x30>
 800306a:	2b08      	cmp	r3, #8
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0x36>
 800306e:	e027      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003072:	613b      	str	r3, [r7, #16]
      break;
 8003074:	e027      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0c9b      	lsrs	r3, r3, #18
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0c5b      	lsrs	r3, r3, #17
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a0d      	ldr	r2, [pc, #52]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e004      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	613b      	str	r3, [r7, #16]
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030c2:	613b      	str	r3, [r7, #16]
      break;
 80030c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c6:	693b      	ldr	r3, [r7, #16]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	0800520c 	.word	0x0800520c
 80030e0:	0800521c 	.word	0x0800521c
 80030e4:	003d0900 	.word	0x003d0900

080030e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b02      	ldr	r3, [pc, #8]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff fff2 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0adb      	lsrs	r3, r3, #11
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08005204 	.word	0x08005204

08003124 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	220f      	movs	r2, #15
 8003132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003134:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_RCC_GetClockConfig+0x58>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003140:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_RCC_GetClockConfig+0x58>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_GetClockConfig+0x58>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003158:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_RCC_GetClockConfig+0x58>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	40022000 	.word	0x40022000

08003184 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	d104      	bne.n	800319e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003194:	f000 f828 	bl	80031e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800319a:	2280      	movs	r2, #128	@ 0x80
 800319c:	701a      	strb	r2, [r3, #0]
  }
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	4002100a 	.word	0x4002100a

080031ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <RCC_Delay+0x34>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <RCC_Delay+0x38>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0a5b      	lsrs	r3, r3, #9
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c8:	bf00      	nop
  }
  while (Delay --);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	60fa      	str	r2, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <RCC_Delay+0x1c>
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000000 	.word	0x20000000
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d07d      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003214:	4b4f      	ldr	r3, [pc, #316]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b4c      	ldr	r3, [pc, #304]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4a4b      	ldr	r2, [pc, #300]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322a:	61d3      	str	r3, [r2, #28]
 800322c:	4b49      	ldr	r3, [pc, #292]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	4b46      	ldr	r3, [pc, #280]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d118      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003248:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a42      	ldr	r2, [pc, #264]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003254:	f7fd fab2 	bl	80007bc <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	e008      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fd faae 	bl	80007bc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e06d      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b3a      	ldr	r3, [pc, #232]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327a:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d02e      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	429a      	cmp	r2, r3
 8003296:	d027      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003298:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a2:	4b2e      	ldr	r3, [pc, #184]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a8:	4b2c      	ldr	r3, [pc, #176]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ae:	4a29      	ldr	r2, [pc, #164]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d014      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fd fa7d 	bl	80007bc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fd fa79 	bl	80007bc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e036      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4917      	ldr	r1, [pc, #92]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	4a13      	ldr	r2, [pc, #76]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003318:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	490b      	ldr	r1, [pc, #44]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003336:	4b07      	ldr	r3, [pc, #28]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4904      	ldr	r1, [pc, #16]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	42420440 	.word	0x42420440

08003360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e041      	b.n	80033f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f839 	bl	80033fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f000 f9b4 	bl	800370c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d001      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e03a      	b.n	800349e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003452:	d009      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a14      	ldr	r2, [pc, #80]	@ (80034ac <HAL_TIM_Base_Start_IT+0x9c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a13      	ldr	r2, [pc, #76]	@ (80034b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d111      	bne.n	800348c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d010      	beq.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	e007      	b.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800

080034b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8ed 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8e0 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8ef 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0204 	mvn.w	r2, #4
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8c3 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8b6 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8c5 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b08      	cmp	r3, #8
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0208 	mvn.w	r2, #8
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2204      	movs	r2, #4
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f899 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f88c 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f89b 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0210 	mvn.w	r2, #16
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2208      	movs	r2, #8
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f86f 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f862 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f871 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0201 	mvn.w	r2, #1
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fc fec6 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b80      	cmp	r3, #128	@ 0x80
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003650:	2b80      	cmp	r3, #128	@ 0x80
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8bf 	bl	80037e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f835 	bl	80036fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0220 	mvn.w	r2, #32
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f88a 	bl	80037d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a29      	ldr	r2, [pc, #164]	@ (80037c4 <TIM_Base_SetConfig+0xb8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_Base_SetConfig+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a26      	ldr	r2, [pc, #152]	@ (80037c8 <TIM_Base_SetConfig+0xbc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <TIM_Base_SetConfig+0xc0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1c      	ldr	r2, [pc, #112]	@ (80037c4 <TIM_Base_SetConfig+0xb8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <TIM_Base_SetConfig+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a19      	ldr	r2, [pc, #100]	@ (80037c8 <TIM_Base_SetConfig+0xbc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <TIM_Base_SetConfig+0xc0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a07      	ldr	r2, [pc, #28]	@ (80037c4 <TIM_Base_SetConfig+0xb8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	615a      	str	r2, [r3, #20]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800

080037d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037f4:	b084      	sub	sp, #16
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	f107 0014 	add.w	r0, r7, #20
 8003802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	b004      	add	sp, #16
 8003812:	4770      	bx	lr

08003814 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800381c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003820:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b29b      	uxth	r3, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	4013      	ands	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003860:	b084      	sub	sp, #16
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	f107 0014 	add.w	r0, r7, #20
 800386e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	b004      	add	sp, #16
 800389e:	4770      	bx	lr

080038a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0c2      	sub	sp, #264	@ 0x108
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038ae:	6018      	str	r0, [r3, #0]
 80038b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038b8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	785b      	ldrb	r3, [r3, #1]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	f040 86b7 	bne.w	800463a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d908      	bls.n	80038fa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80038e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038f8:	e007      	b.n	800390a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80038fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800390a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800390e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	7b1b      	ldrb	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d13a      	bne.n	8003990 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800391a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800391e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6959      	ldr	r1, [r3, #20]
 8003926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800392a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	88da      	ldrh	r2, [r3, #6]
 8003932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003936:	b29b      	uxth	r3, r3
 8003938:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800393c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003940:	6800      	ldr	r0, [r0, #0]
 8003942:	f001 fb8a 	bl	800505a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800394a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800396e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	011a      	lsls	r2, r3, #4
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	f000 be1f 	b.w	80045ce <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78db      	ldrb	r3, [r3, #3]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f040 8462 	bne.w	8004266 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80039a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	f240 83df 	bls.w	800417e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80039c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80039ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a10:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2c:	1ad2      	subs	r2, r2, r3
 8003a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 81c7 	beq.w	8003df0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	785b      	ldrb	r3, [r3, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d177      	bne.n	8003b6e <USB_EPStartXfer+0x2ce>
 8003a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	4413      	add	r3, r2
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	011a      	lsls	r2, r3, #4
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ad0:	d921      	bls.n	8003b16 <USB_EPStartXfer+0x276>
 8003ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <USB_EPStartXfer+0x252>
 8003ae8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003aec:	3b01      	subs	r3, #1
 8003aee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	e050      	b.n	8003bb8 <USB_EPStartXfer+0x318>
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <USB_EPStartXfer+0x294>
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	e041      	b.n	8003bb8 <USB_EPStartXfer+0x318>
 8003b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <USB_EPStartXfer+0x2b4>
 8003b4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e024      	b.n	8003bb8 <USB_EPStartXfer+0x318>
 8003b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d11c      	bne.n	8003bb8 <USB_EPStartXfer+0x318>
 8003b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	4413      	add	r3, r2
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	011a      	lsls	r2, r3, #4
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	895b      	ldrh	r3, [r3, #10]
 8003bc4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6959      	ldr	r1, [r3, #20]
 8003bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003bde:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003be2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003be6:	6800      	ldr	r0, [r0, #0]
 8003be8:	f001 fa37 	bl	800505a <USB_WritePMA>
            ep->xfer_buff += len;
 8003bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfc:	441a      	add	r2, r3
 8003bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d90f      	bls.n	8003c46 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	621a      	str	r2, [r3, #32]
 8003c44:	e00e      	b.n	8003c64 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	785b      	ldrb	r3, [r3, #1]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d177      	bne.n	8003d64 <USB_EPStartXfer+0x4c4>
 8003c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	4413      	add	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	011a      	lsls	r2, r3, #4
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cc6:	d921      	bls.n	8003d0c <USB_EPStartXfer+0x46c>
 8003cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <USB_EPStartXfer+0x448>
 8003cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	e056      	b.n	8003dba <USB_EPStartXfer+0x51a>
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <USB_EPStartXfer+0x48a>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	e047      	b.n	8003dba <USB_EPStartXfer+0x51a>
 8003d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <USB_EPStartXfer+0x4aa>
 8003d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d44:	3301      	adds	r3, #1
 8003d46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	029b      	lsls	r3, r3, #10
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	801a      	strh	r2, [r3, #0]
 8003d62:	e02a      	b.n	8003dba <USB_EPStartXfer+0x51a>
 8003d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d122      	bne.n	8003dba <USB_EPStartXfer+0x51a>
 8003d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4413      	add	r3, r2
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	4413      	add	r3, r2
 8003daa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	891b      	ldrh	r3, [r3, #8]
 8003dc6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6959      	ldr	r1, [r3, #20]
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003de0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003de4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	f001 f936 	bl	800505a <USB_WritePMA>
 8003dee:	e3ee      	b.n	80045ce <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d177      	bne.n	8003ef0 <USB_EPStartXfer+0x650>
 8003e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e20:	4413      	add	r3, r2
 8003e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	011a      	lsls	r2, r3, #4
 8003e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e34:	4413      	add	r3, r2
 8003e36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e4a:	801a      	strh	r2, [r3, #0]
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e50:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e52:	d921      	bls.n	8003e98 <USB_EPStartXfer+0x5f8>
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <USB_EPStartXfer+0x5d4>
 8003e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	029b      	lsls	r3, r3, #10
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	e056      	b.n	8003f46 <USB_EPStartXfer+0x6a6>
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <USB_EPStartXfer+0x616>
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	e047      	b.n	8003f46 <USB_EPStartXfer+0x6a6>
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <USB_EPStartXfer+0x636>
 8003ecc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	e02a      	b.n	8003f46 <USB_EPStartXfer+0x6a6>
 8003ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d122      	bne.n	8003f46 <USB_EPStartXfer+0x6a6>
 8003f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f20:	4413      	add	r3, r2
 8003f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	011a      	lsls	r2, r3, #4
 8003f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f34:	4413      	add	r3, r2
 8003f36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	891b      	ldrh	r3, [r3, #8]
 8003f52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6959      	ldr	r1, [r3, #20]
 8003f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003f6c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003f70:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003f74:	6800      	ldr	r0, [r0, #0]
 8003f76:	f001 f870 	bl	800505a <USB_WritePMA>
            ep->xfer_buff += len;
 8003f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8a:	441a      	add	r2, r3
 8003f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d90f      	bls.n	8003fd4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc4:	1ad2      	subs	r2, r2, r3
 8003fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	621a      	str	r2, [r3, #32]
 8003fd2:	e00e      	b.n	8003ff2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d177      	bne.n	80040fe <USB_EPStartXfer+0x85e>
 800400e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800401a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800401e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	4413      	add	r3, r2
 8004030:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	011a      	lsls	r2, r3, #4
 8004040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004042:	4413      	add	r3, r2
 8004044:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004048:	637b      	str	r3, [r7, #52]	@ 0x34
 800404a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004054:	b29a      	uxth	r2, r3
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004060:	d921      	bls.n	80040a6 <USB_EPStartXfer+0x806>
 8004062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <USB_EPStartXfer+0x7e2>
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	3b01      	subs	r3, #1
 800407e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29a      	uxth	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	b29b      	uxth	r3, r3
 800408e:	029b      	lsls	r3, r3, #10
 8004090:	b29b      	uxth	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e050      	b.n	8004148 <USB_EPStartXfer+0x8a8>
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <USB_EPStartXfer+0x824>
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	e041      	b.n	8004148 <USB_EPStartXfer+0x8a8>
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <USB_EPStartXfer+0x844>
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	3301      	adds	r3, #1
 80040e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e024      	b.n	8004148 <USB_EPStartXfer+0x8a8>
 80040fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d11c      	bne.n	8004148 <USB_EPStartXfer+0x8a8>
 800410e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004122:	4413      	add	r3, r2
 8004124:	643b      	str	r3, [r7, #64]	@ 0x40
 8004126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800412a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	011a      	lsls	r2, r3, #4
 8004134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004136:	4413      	add	r3, r2
 8004138:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800413e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004142:	b29a      	uxth	r2, r3
 8004144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004146:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800414c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	895b      	ldrh	r3, [r3, #10]
 8004154:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800415c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6959      	ldr	r1, [r3, #20]
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004168:	b29b      	uxth	r3, r3
 800416a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800416e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004172:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004176:	6800      	ldr	r0, [r0, #0]
 8004178:	f000 ff6f 	bl	800505a <USB_WritePMA>
 800417c:	e227      	b.n	80045ce <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800417e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800418e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800419c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80041b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80041b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80041d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800420a:	4413      	add	r3, r2
 800420c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800420e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	011a      	lsls	r2, r3, #4
 800421c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800421e:	4413      	add	r3, r2
 8004220:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004224:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422a:	b29a      	uxth	r2, r3
 800422c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800422e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	891b      	ldrh	r3, [r3, #8]
 800423c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6959      	ldr	r1, [r3, #20]
 800424c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004250:	b29b      	uxth	r3, r3
 8004252:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004256:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800425a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800425e:	6800      	ldr	r0, [r0, #0]
 8004260:	f000 fefb 	bl	800505a <USB_WritePMA>
 8004264:	e1b3      	b.n	80045ce <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800426a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800427c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80c6 	beq.w	8004438 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d177      	bne.n	80043b8 <USB_EPStartXfer+0xb18>
 80042c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042e8:	4413      	add	r3, r2
 80042ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	011a      	lsls	r2, r3, #4
 80042fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004302:	667b      	str	r3, [r7, #100]	@ 0x64
 8004304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430e:	b29a      	uxth	r2, r3
 8004310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004318:	2b3e      	cmp	r3, #62	@ 0x3e
 800431a:	d921      	bls.n	8004360 <USB_EPStartXfer+0xac0>
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <USB_EPStartXfer+0xa9c>
 8004332:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004336:	3b01      	subs	r3, #1
 8004338:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800433c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29a      	uxth	r2, r3
 8004342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004346:	b29b      	uxth	r3, r3
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	b29b      	uxth	r3, r3
 800434c:	4313      	orrs	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004358:	b29a      	uxth	r2, r3
 800435a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e050      	b.n	8004402 <USB_EPStartXfer+0xb62>
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <USB_EPStartXfer+0xade>
 8004368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e041      	b.n	8004402 <USB_EPStartXfer+0xb62>
 800437e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <USB_EPStartXfer+0xafe>
 8004394:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004398:	3301      	adds	r3, #1
 800439a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800439e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	e024      	b.n	8004402 <USB_EPStartXfer+0xb62>
 80043b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d11c      	bne.n	8004402 <USB_EPStartXfer+0xb62>
 80043c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043dc:	4413      	add	r3, r2
 80043de:	673b      	str	r3, [r7, #112]	@ 0x70
 80043e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	011a      	lsls	r2, r3, #4
 80043ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f0:	4413      	add	r3, r2
 80043f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	895b      	ldrh	r3, [r3, #10]
 800440e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6959      	ldr	r1, [r3, #20]
 800441e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004422:	b29b      	uxth	r3, r3
 8004424:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004428:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800442c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004430:	6800      	ldr	r0, [r0, #0]
 8004432:	f000 fe12 	bl	800505a <USB_WritePMA>
 8004436:	e0ca      	b.n	80045ce <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800443c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d177      	bne.n	8004538 <USB_EPStartXfer+0xc98>
 8004448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800444c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004468:	4413      	add	r3, r2
 800446a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800446c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	011a      	lsls	r2, r3, #4
 800447a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800447c:	4413      	add	r3, r2
 800447e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004482:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800448e:	b29a      	uxth	r2, r3
 8004490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004498:	2b3e      	cmp	r3, #62	@ 0x3e
 800449a:	d921      	bls.n	80044e0 <USB_EPStartXfer+0xc40>
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <USB_EPStartXfer+0xc1c>
 80044b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80044bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d8:	b29a      	uxth	r2, r3
 80044da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	e05c      	b.n	800459a <USB_EPStartXfer+0xcfa>
 80044e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <USB_EPStartXfer+0xc5e>
 80044e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	e04d      	b.n	800459a <USB_EPStartXfer+0xcfa>
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <USB_EPStartXfer+0xc7e>
 8004514:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004518:	3301      	adds	r3, #1
 800451a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800451e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29a      	uxth	r2, r3
 8004524:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004528:	b29b      	uxth	r3, r3
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	b29b      	uxth	r3, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	b29a      	uxth	r2, r3
 8004532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e030      	b.n	800459a <USB_EPStartXfer+0xcfa>
 8004538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800453c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d128      	bne.n	800459a <USB_EPStartXfer+0xcfa>
 8004548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800454c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800455a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800456c:	4413      	add	r3, r2
 800456e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	011a      	lsls	r2, r3, #4
 8004580:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004584:	4413      	add	r3, r2
 8004586:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800458a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800458e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004592:	b29a      	uxth	r2, r3
 8004594:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004598:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800459a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800459e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	891b      	ldrh	r3, [r3, #8]
 80045a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6959      	ldr	r1, [r3, #20]
 80045b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80045c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80045c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80045c8:	6800      	ldr	r0, [r0, #0]
 80045ca:	f000 fd46 	bl	800505a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80045ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f4:	817b      	strh	r3, [r7, #10]
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	f083 0310 	eor.w	r3, r3, #16
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	f083 0320 	eor.w	r3, r3, #32
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800460a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	897b      	ldrh	r3, [r7, #10]
 8004622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800462a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800462e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]
 8004636:	f000 bcde 	b.w	8004ff6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800463a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800463e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	7b1b      	ldrb	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 80bb 	bne.w	80047c2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800464c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800465c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d917      	bls.n	8004698 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800467c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004688:	1ad2      	subs	r2, r2, r3
 800468a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800468e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	e00e      	b.n	80046b6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800469c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80046a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80046b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046da:	4413      	add	r3, r2
 80046dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	011a      	lsls	r2, r3, #4
 80046ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046f2:	4413      	add	r3, r2
 80046f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004708:	b29a      	uxth	r2, r3
 800470a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004714:	2b3e      	cmp	r3, #62	@ 0x3e
 8004716:	d924      	bls.n	8004762 <USB_EPStartXfer+0xec2>
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <USB_EPStartXfer+0xe98>
 800472e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004732:	3b01      	subs	r3, #1
 8004734:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29a      	uxth	r2, r3
 8004740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004744:	b29b      	uxth	r3, r3
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	b29b      	uxth	r3, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004756:	b29a      	uxth	r2, r3
 8004758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	f000 bc10 	b.w	8004f82 <USB_EPStartXfer+0x16e2>
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <USB_EPStartXfer+0xee4>
 800476a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477a:	b29a      	uxth	r2, r3
 800477c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e3fe      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800478e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <USB_EPStartXfer+0xf04>
 800479a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800479e:	3301      	adds	r3, #1
 80047a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	4313      	orrs	r3, r2
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	e3df      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80047c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	f040 8218 	bne.w	8004c04 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80047d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 809d 	bne.w	8004920 <USB_EPStartXfer+0x1080>
 80047e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800480a:	4413      	add	r3, r2
 800480c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004822:	4413      	add	r3, r2
 8004824:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800482c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004838:	b29a      	uxth	r2, r3
 800483a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b3e      	cmp	r3, #62	@ 0x3e
 800484e:	d92b      	bls.n	80048a8 <USB_EPStartXfer+0x1008>
 8004850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <USB_EPStartXfer+0xfe0>
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487a:	3b01      	subs	r3, #1
 800487c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488c:	b29b      	uxth	r3, r3
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	b29b      	uxth	r3, r3
 8004892:	4313      	orrs	r3, r2
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489e:	b29a      	uxth	r2, r3
 80048a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e070      	b.n	800498a <USB_EPStartXfer+0x10ea>
 80048a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10c      	bne.n	80048d2 <USB_EPStartXfer+0x1032>
 80048b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	e05b      	b.n	800498a <USB_EPStartXfer+0x10ea>
 80048d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <USB_EPStartXfer+0x1062>
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fc:	3301      	adds	r3, #1
 80048fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29b      	uxth	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	b29a      	uxth	r2, r3
 8004918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	e034      	b.n	800498a <USB_EPStartXfer+0x10ea>
 8004920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d12c      	bne.n	800498a <USB_EPStartXfer+0x10ea>
 8004930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800493e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004954:	4413      	add	r3, r2
 8004956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800495a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	011a      	lsls	r2, r3, #4
 8004968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800496c:	4413      	add	r3, r2
 800496e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800497a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	b29a      	uxth	r2, r3
 8004984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800498e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800499c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 809d 	bne.w	8004ae4 <USB_EPStartXfer+0x1244>
 80049aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049ce:	4413      	add	r3, r2
 80049d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a12:	d92b      	bls.n	8004a6c <USB_EPStartXfer+0x11cc>
 8004a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <USB_EPStartXfer+0x11a4>
 8004a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	e069      	b.n	8004b40 <USB_EPStartXfer+0x12a0>
 8004a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <USB_EPStartXfer+0x11f6>
 8004a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e054      	b.n	8004b40 <USB_EPStartXfer+0x12a0>
 8004a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <USB_EPStartXfer+0x1226>
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	e02d      	b.n	8004b40 <USB_EPStartXfer+0x12a0>
 8004ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d125      	bne.n	8004b40 <USB_EPStartXfer+0x12a0>
 8004af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	011a      	lsls	r2, r3, #4
 8004b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b22:	4413      	add	r3, r2
 8004b24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b3e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8218 	beq.w	8004f82 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <USB_EPStartXfer+0x12ea>
 8004b7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 81f5 	bne.w	8004f82 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b98:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 81ee 	bne.w	8004f82 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bcc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
 8004c02:	e1be      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f040 81b4 	bne.w	8004f7e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d917      	bls.n	8004c62 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	619a      	str	r2, [r3, #24]
 8004c60:	e00e      	b.n	8004c80 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 8085 	bne.w	8004d9c <USB_EPStartXfer+0x14fc>
 8004c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	011a      	lsls	r2, r3, #4
 8004cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cce:	4413      	add	r3, r2
 8004cd0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cf2:	d923      	bls.n	8004d3c <USB_EPStartXfer+0x149c>
 8004cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <USB_EPStartXfer+0x1474>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e060      	b.n	8004dfe <USB_EPStartXfer+0x155e>
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10c      	bne.n	8004d5e <USB_EPStartXfer+0x14be>
 8004d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e04f      	b.n	8004dfe <USB_EPStartXfer+0x155e>
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <USB_EPStartXfer+0x14de>
 8004d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e030      	b.n	8004dfe <USB_EPStartXfer+0x155e>
 8004d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d128      	bne.n	8004dfe <USB_EPStartXfer+0x155e>
 8004dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	011a      	lsls	r2, r3, #4
 8004de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f040 8085 	bne.w	8004f28 <USB_EPStartXfer+0x1688>
 8004e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e42:	4413      	add	r3, r2
 8004e44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	011a      	lsls	r2, r3, #4
 8004e56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e7e:	d923      	bls.n	8004ec8 <USB_EPStartXfer+0x1628>
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <USB_EPStartXfer+0x1600>
 8004e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e05c      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <USB_EPStartXfer+0x164a>
 8004ed0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e04b      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <USB_EPStartXfer+0x166a>
 8004f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f04:	3301      	adds	r3, #1
 8004f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	e02c      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d124      	bne.n	8004f82 <USB_EPStartXfer+0x16e2>
 8004f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f4e:	4413      	add	r3, r2
 8004f50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	011a      	lsls	r2, r3, #4
 8004f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f66:	4413      	add	r3, r2
 8004f68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	e001      	b.n	8004f82 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e03a      	b.n	8004ff8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004fac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004fb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004fb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004fbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fc0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2280      	movs	r2, #128	@ 0x80
 8005018:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800504a:	b29b      	uxth	r3, r3
 800504c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800505a:	b480      	push	{r7}
 800505c:	b08b      	sub	sp, #44	@ 0x2c
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	4611      	mov	r1, r2
 8005066:	461a      	mov	r2, r3
 8005068:	460b      	mov	r3, r1
 800506a:	80fb      	strh	r3, [r7, #6]
 800506c:	4613      	mov	r3, r2
 800506e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005070:	88bb      	ldrh	r3, [r7, #4]
 8005072:	3301      	adds	r3, #1
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	005a      	lsls	r2, r3, #1
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800508c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
 8005092:	e01e      	b.n	80050d2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	b21a      	sxth	r2, r3
 80050a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b21b      	sxth	r3, r3
 80050ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	8a7a      	ldrh	r2, [r7, #18]
 80050b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	3302      	adds	r3, #2
 80050b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	3302      	adds	r3, #2
 80050be:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	3b01      	subs	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1dd      	bne.n	8005094 <USB_WritePMA+0x3a>
  }
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	372c      	adds	r7, #44	@ 0x2c
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b08b      	sub	sp, #44	@ 0x2c
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	460b      	mov	r3, r1
 80050f4:	80fb      	strh	r3, [r7, #6]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	b29b      	uxth	r3, r3
 8005100:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	005a      	lsls	r2, r3, #1
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005116:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
 800511c:	e01b      	b.n	8005156 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	3302      	adds	r3, #2
 800512a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	b2da      	uxtb	r2, r3
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	3302      	adds	r3, #2
 800514e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	3b01      	subs	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e0      	bne.n	800511e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800515c:	88bb      	ldrh	r3, [r7, #4]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	701a      	strb	r2, [r3, #0]
  }
}
 8005178:	bf00      	nop
 800517a:	372c      	adds	r7, #44	@ 0x2c
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <memset>:
 8005182:	4603      	mov	r3, r0
 8005184:	4402      	add	r2, r0
 8005186:	4293      	cmp	r3, r2
 8005188:	d100      	bne.n	800518c <memset+0xa>
 800518a:	4770      	bx	lr
 800518c:	f803 1b01 	strb.w	r1, [r3], #1
 8005190:	e7f9      	b.n	8005186 <memset+0x4>
	...

08005194 <__libc_init_array>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	2600      	movs	r6, #0
 8005198:	4d0c      	ldr	r5, [pc, #48]	@ (80051cc <__libc_init_array+0x38>)
 800519a:	4c0d      	ldr	r4, [pc, #52]	@ (80051d0 <__libc_init_array+0x3c>)
 800519c:	1b64      	subs	r4, r4, r5
 800519e:	10a4      	asrs	r4, r4, #2
 80051a0:	42a6      	cmp	r6, r4
 80051a2:	d109      	bne.n	80051b8 <__libc_init_array+0x24>
 80051a4:	f000 f81a 	bl	80051dc <_init>
 80051a8:	2600      	movs	r6, #0
 80051aa:	4d0a      	ldr	r5, [pc, #40]	@ (80051d4 <__libc_init_array+0x40>)
 80051ac:	4c0a      	ldr	r4, [pc, #40]	@ (80051d8 <__libc_init_array+0x44>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	42a6      	cmp	r6, r4
 80051b4:	d105      	bne.n	80051c2 <__libc_init_array+0x2e>
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051bc:	4798      	blx	r3
 80051be:	3601      	adds	r6, #1
 80051c0:	e7ee      	b.n	80051a0 <__libc_init_array+0xc>
 80051c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c6:	4798      	blx	r3
 80051c8:	3601      	adds	r6, #1
 80051ca:	e7f2      	b.n	80051b2 <__libc_init_array+0x1e>
 80051cc:	08005220 	.word	0x08005220
 80051d0:	08005220 	.word	0x08005220
 80051d4:	08005220 	.word	0x08005220
 80051d8:	08005224 	.word	0x08005224

080051dc <_init>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr

080051e8 <_fini>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr
